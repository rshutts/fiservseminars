{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rstrasser\\\\Desktop\\\\My Stuff\\\\Seminars\\\\Sites\\\\fiservseminars\\\\src\\\\containers\\\\Chat\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, Component, useRef } from 'react';\nimport API, { graphqlOperation } from '@aws-amplify/api';\nimport '@aws-amplify/pubsub';\nimport { Connect } from \"aws-amplify-react\";\nimport Amplify, { Auth, Storage } from 'aws-amplify';\nimport VideoPlayer from '../VideoPlayer';\nimport ProfileImage from './profileImage';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport { useFormFields } from \"../../libs/hooksLib\";\nimport { onError } from \"../../libs/errorLib\";\nimport { createMessage } from '../../graphql/mutations';\nimport { onCreateMessage } from '../../graphql/subscriptions';\nimport { messagesByChannelId } from '../../graphql/queries';\nimport './Chat.css';\nimport config from '../../aws-config';\n/* Amplify.configure({\r\n  \"aws_appsync_graphqlEndpoint\": \"https://qssh4niq5bgujocnsbpv2zg7am.appsync-api.us-east-1.amazonaws.com/graphql\",\r\n  \"aws_appsync_region\": \"us-east-1\",\r\n  \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\r\n  Auth: {\r\n    region: config.aws_cognito_region,\r\n    userPoolId: config.aws_user_pools_id,\r\n    identityPoolId: config.aws_cognito_identity_pool_id,\r\n    userPoolWebClientId: config.aws_user_pools_client_id\r\n  },    \r\n  Storage: {\r\n    bucket: config.aws_s3_bucket,\r\n    region: config.aws_s3_bucket_region,\r\n    identityPoolId: config.aws_cognito_identity_pool_id\r\n  }\r\n}); */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = props => {\n  _s();\n\n  const [username, setState] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [messageBody, setMessageBody] = useState('');\n  const messagesEndRef = useRef(null);\n  const [user, setUser] = useState({\n    userID: \"\"\n  });\n  useEffect(() => {\n    async function getUsername() {\n      const {\n        username\n      } = await Auth.currentAuthenticatedUser();\n      setState(username);\n    }\n\n    getUsername();\n  }, []);\n  useEffect(() => {\n    async function getUser() {\n      const user = await Auth.currentUserInfo();\n      setUser({\n        userID: user.id\n      });\n      console.log(user.id);\n    }\n\n    getUser();\n  }, []);\n  useEffect(() => {\n    API.graphql(graphqlOperation(messagesByChannelId, {\n      channelID: '1',\n      sortDirection: 'ASC'\n    })).then(response => {\n      var _response$data, _response$data$messag;\n\n      const items = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$messag = _response$data.messagesByChannelID) === null || _response$data$messag === void 0 ? void 0 : _response$data$messag.items;\n\n      if (items) {\n        setMessages(items);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    const subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: event => {\n        setMessages([...messages, event.value.data.onCreateMessage]);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [messages]);\n\n  const handleChange = event => {\n    setMessageBody(event.target.value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const input = {\n      channelID: '1',\n      author: username,\n      userID: id,\n      body: messageBody.trim()\n    };\n\n    try {\n      setMessageBody('');\n      await API.graphql(graphqlOperation(createMessage, {\n        input\n      }));\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    const options = {\n      minUptime: 50000,\n      connectionTimeout: 40000,\n      maxRetries: Infinity,\n      maxEnqueuedMessages: Infinity\n    };\n    const connection = new ReconnectingWebSocket(config.CHAT_WEBSOCKET, [], options);\n\n    connection.onopen = event => {\n      console.log('WebSocket is now open.');\n    };\n\n    connection.onclose = event => {\n      console.log('WebSocket is now closed.');\n    };\n\n    connection.onerror = event => {\n      console.error('WebSocket error observed:', event);\n    };\n  });\n  const [image, setImage] = useState([]);\n  let fileInput = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    onPageRendered();\n  }, []);\n\n  const onPageRendered = async () => {\n    getProfilePicture();\n  };\n\n  const getProfilePicture = () => {\n    Storage.get(`profile.png`, {\n      level: 'private'\n    }).then(url => {\n      var myRequest = new Request(url);\n      fetch(myRequest).then(function (response) {\n        if (response.status === 200) {\n          setImage(url);\n        }\n\n        console.log(url);\n      });\n    }).catch(err => console.log(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main full-width full-height\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-wrapper mg-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-wrapper pos-absolute pd-t-1 top-0 bottom-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-scroller messages\",\n            children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: message.author === username ? 'message me' : 'message',\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: image,\n                height: \"50px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 21\n              }, this), console.log(message.userID), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: message.author\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 23\n                }, this), message.body]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: messagesEndRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-bar composer\",\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: handleSubmit,\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"message\",\n                  placeholder: \"Type your message here...\",\n                  onChange: handleChange,\n                  value: messageBody\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Chat, \"DvvnsCXlDVmMfVOapZyBE7UtQEk=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/rstrasser/Desktop/My Stuff/Seminars/Sites/fiservseminars/src/containers/Chat/index.js"],"names":["React","useEffect","useState","Component","useRef","API","graphqlOperation","Connect","Amplify","Auth","Storage","VideoPlayer","ProfileImage","ReconnectingWebSocket","useFormFields","onError","createMessage","onCreateMessage","messagesByChannelId","config","Chat","props","username","setState","messages","setMessages","messageBody","setMessageBody","messagesEndRef","user","setUser","userID","getUsername","currentAuthenticatedUser","getUser","currentUserInfo","id","console","log","graphql","channelID","sortDirection","then","response","items","data","messagesByChannelID","subscription","subscribe","next","event","value","unsubscribe","handleChange","target","handleSubmit","preventDefault","stopPropagation","input","author","body","trim","error","warn","scrollToBottom","current","scrollIntoView","behavior","options","minUptime","connectionTimeout","maxRetries","Infinity","maxEnqueuedMessages","connection","CHAT_WEBSOCKET","onopen","onclose","onerror","image","setImage","fileInput","createRef","onPageRendered","getProfilePicture","get","level","url","myRequest","Request","fetch","status","catch","err","map","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Component, useRef } from 'react';\r\n\r\nimport API, { graphqlOperation } from '@aws-amplify/api';\r\nimport '@aws-amplify/pubsub';\r\nimport { Connect } from \"aws-amplify-react\";\r\nimport Amplify, { Auth, Storage } from 'aws-amplify';\r\n\r\nimport VideoPlayer from '../VideoPlayer';\r\nimport ProfileImage from './profileImage';\r\nimport ReconnectingWebSocket from 'reconnecting-websocket';\r\n\r\nimport { useFormFields } from \"../../libs/hooksLib\";\r\nimport { onError } from \"../../libs/errorLib\";\r\nimport { createMessage } from '../../graphql/mutations';\r\nimport { onCreateMessage } from '../../graphql/subscriptions';\r\nimport { messagesByChannelId } from '../../graphql/queries';\r\n\r\nimport './Chat.css';\r\n\r\nimport config from '../../aws-config';\r\n\r\n/* Amplify.configure({\r\n  \"aws_appsync_graphqlEndpoint\": \"https://qssh4niq5bgujocnsbpv2zg7am.appsync-api.us-east-1.amazonaws.com/graphql\",\r\n  \"aws_appsync_region\": \"us-east-1\",\r\n  \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\r\n  Auth: {\r\n    region: config.aws_cognito_region,\r\n    userPoolId: config.aws_user_pools_id,\r\n    identityPoolId: config.aws_cognito_identity_pool_id,\r\n    userPoolWebClientId: config.aws_user_pools_client_id\r\n  },    \r\n  Storage: {\r\n    bucket: config.aws_s3_bucket,\r\n    region: config.aws_s3_bucket_region,\r\n    identityPoolId: config.aws_cognito_identity_pool_id\r\n  }\r\n}); */\r\n\r\nconst Chat = props => {\r\n  const [username, setState] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [messageBody, setMessageBody] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n  const [user, setUser] = useState({\r\n    userID: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function getUsername() {\r\n      const { username } = await Auth.currentAuthenticatedUser();\r\n      setState(username);\r\n    }\r\n    getUsername();\r\n  }, [])\r\n  \r\n  useEffect(() => {\r\n    async function getUser() {\r\n      const user = await Auth.currentUserInfo();\r\n      setUser({\r\n        userID: user.id,\r\n      });console.log(user.id)\r\n    }\r\n    getUser();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    API\r\n      .graphql(graphqlOperation(messagesByChannelId, {\r\n        channelID: '1',\r\n        sortDirection: 'ASC'\r\n      }))\r\n      .then((response) => {\r\n        const items = response?.data?.messagesByChannelID?.items;\r\n\r\n        if (items) {\r\n          setMessages(items);\r\n        }\r\n      })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const subscription = API\r\n      .graphql(graphqlOperation(onCreateMessage))\r\n      .subscribe({\r\n        next: (event) => {\r\n          setMessages([...messages, event.value.data.onCreateMessage]);\r\n        }\r\n      });\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    }\r\n  }, [messages]);\r\n\r\n  const handleChange = (event) => {\r\n    setMessageBody(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    \r\n    const input = {\r\n      channelID: '1',\r\n      author: (username),\r\n      userID: (id),\r\n      body: messageBody.trim()\r\n    };\r\n\r\n    try {\r\n      setMessageBody('');\r\n      await API.graphql(graphqlOperation(createMessage, { input }))\r\n    } catch (error) {\r\n      console.warn(error);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n        minUptime: 50000,\r\n        connectionTimeout: 40000,\r\n        maxRetries: Infinity,\r\n        maxEnqueuedMessages: Infinity,\r\n    };\r\n    const connection = new ReconnectingWebSocket(config.CHAT_WEBSOCKET, [], options);\r\n    connection.onopen = (event) => {\r\n      console.log('WebSocket is now open.');\r\n    };\r\n\r\n    connection.onclose = (event) => {\r\n      console.log('WebSocket is now closed.');\r\n    };\r\n\r\n    connection.onerror = (event) => {\r\n      console.error('WebSocket error observed:', event);\r\n    };\r\n  })\r\n\r\n  const [image, setImage] = useState([]);\r\n\r\n  let fileInput = React.createRef();\r\n\r\n  useEffect(() => {\r\n    onPageRendered();\r\n  }, []);\r\n\r\n  const onPageRendered = async () => {\r\n    getProfilePicture();\r\n  };\r\n  \r\n  const getProfilePicture = () => {\r\n    Storage.get(`profile.png`, {level: 'private'})\r\n      .then(url => {\r\n        var myRequest = new Request(url);\r\n        fetch(myRequest).then(function(response) {\r\n          if (response.status === 200) {\r\n            setImage(url);\r\n          }\r\n          console.log(url)\r\n        });\r\n      })\r\n      .catch(err => console.log(err));    \r\n  };\r\n  \r\nreturn (\r\n  <div className='main full-width full-height'>\r\n    <div className='content-wrapper mg-2'>\r\n      <div className=\"col-wrapper\">\r\n        <header>\r\n          <h1>Chat</h1>\r\n        </header>\r\n          <div className=\"chat-wrapper pos-absolute pd-t-1 top-0 bottom-0\">\r\n            <div className=\"messages-scroller messages\">\r\n              {messages.map((message) => (\r\n                <div\r\n                  key={message.id}\r\n                  className={message.author === username ? 'message me' : 'message'}>\r\n                    <img src={image} height=\"50px\"/>\r\n                    {console.log(message.userID)}\r\n                    <div>\r\n                      <h3>{message.author}</h3>\r\n                      {message.body}\r\n                    </div>\r\n                  <div ref={messagesEndRef} />\r\n                </div>\r\n              ))}\r\n              <div className=\"chat-bar composer\">\r\n                <form onSubmit={handleSubmit}>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"message\"\r\n                  placeholder=\"Type your message here...\"\r\n                  onChange={handleChange}\r\n                  value={messageBody} />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* {username === 'strasserra04' &&\r\n          <h1>Hi</h1>\r\n        } */}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\n  export default Chat"]},"metadata":{},"sourceType":"module"}