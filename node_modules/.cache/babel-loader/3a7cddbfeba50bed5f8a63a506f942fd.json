{"ast":null,"code":"import * as Sentry from \"@sentry/browser\";\nconst isLocal = process.env.NODE_ENV === \"development\";\nexport function initSentry() {\n  if (isLocal) {\n    return;\n  }\n\n  Sentry.init({\n    dsn: \"https://5f83aa2e21064e47bab8a1f308f940eb@sentry.io/5185720\"\n  });\n}\nexport function logError(error, errorInfo = null) {\n  if (isLocal) {\n    return;\n  }\n\n  Sentry.withScope(scope => {\n    errorInfo && scope.setExtras(errorInfo);\n    Sentry.captureException(error);\n  });\n}\nexport function onError(error) {\n  let errorInfo = {};\n  let message = error.toString(); // Auth errors\n\n  if (!(error instanceof Error) && error.message) {\n    errorInfo = error;\n    message = error.message;\n    error = new Error(message); // API errors\n  } else if (error.config && error.config.url) {\n    errorInfo.url = error.config.url;\n  }\n\n  logError(error, errorInfo);\n  alert(message);\n}","map":{"version":3,"sources":["C:/Users/rstrasser/Desktop/My Stuff/Seminars/Sites/fiservseminars/src/libs/errorLib.js"],"names":["Sentry","isLocal","process","env","NODE_ENV","initSentry","init","dsn","logError","error","errorInfo","withScope","scope","setExtras","captureException","onError","message","toString","Error","config","url","alert"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,iBAAxB;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzC;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B,MAAIJ,OAAJ,EAAa;AACX;AACD;;AAEDD,EAAAA,MAAM,CAACM,IAAP,CAAY;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAZ;AACD;AAED,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,SAAS,GAAG,IAArC,EAA2C;AAChD,MAAIT,OAAJ,EAAa;AACX;AACD;;AAEDD,EAAAA,MAAM,CAACW,SAAP,CAAkBC,KAAD,IAAW;AAC1BF,IAAAA,SAAS,IAAIE,KAAK,CAACC,SAAN,CAAgBH,SAAhB,CAAb;AACAV,IAAAA,MAAM,CAACc,gBAAP,CAAwBL,KAAxB;AACD,GAHD;AAID;AAED,OAAO,SAASM,OAAT,CAAiBN,KAAjB,EAAwB;AAC7B,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIM,OAAO,GAAGP,KAAK,CAACQ,QAAN,EAAd,CAF6B,CAI7B;;AACA,MAAI,EAAER,KAAK,YAAYS,KAAnB,KAA6BT,KAAK,CAACO,OAAvC,EAAgD;AAC9CN,IAAAA,SAAS,GAAGD,KAAZ;AACAO,IAAAA,OAAO,GAAGP,KAAK,CAACO,OAAhB;AACAP,IAAAA,KAAK,GAAG,IAAIS,KAAJ,CAAUF,OAAV,CAAR,CAH8C,CAI9C;AACD,GALD,MAKO,IAAIP,KAAK,CAACU,MAAN,IAAgBV,KAAK,CAACU,MAAN,CAAaC,GAAjC,EAAsC;AAC3CV,IAAAA,SAAS,CAACU,GAAV,GAAgBX,KAAK,CAACU,MAAN,CAAaC,GAA7B;AACD;;AAEDZ,EAAAA,QAAQ,CAACC,KAAD,EAAQC,SAAR,CAAR;AAEAW,EAAAA,KAAK,CAACL,OAAD,CAAL;AACD","sourcesContent":["import * as Sentry from \"@sentry/browser\";\r\n\r\nconst isLocal = process.env.NODE_ENV === \"development\";\r\n\r\nexport function initSentry() {\r\n  if (isLocal) {\r\n    return;\r\n  }\r\n\r\n  Sentry.init({ dsn: \"https://5f83aa2e21064e47bab8a1f308f940eb@sentry.io/5185720\" });\r\n}\r\n\r\nexport function logError(error, errorInfo = null) {\r\n  if (isLocal) {\r\n    return;\r\n  }\r\n\r\n  Sentry.withScope((scope) => {\r\n    errorInfo && scope.setExtras(errorInfo);\r\n    Sentry.captureException(error);\r\n  });\r\n}\r\n\r\nexport function onError(error) {\r\n  let errorInfo = {};\r\n  let message = error.toString();\r\n\r\n  // Auth errors\r\n  if (!(error instanceof Error) && error.message) {\r\n    errorInfo = error;\r\n    message = error.message;\r\n    error = new Error(message);\r\n    // API errors\r\n  } else if (error.config && error.config.url) {\r\n    errorInfo.url = error.config.url;\r\n  }\r\n\r\n  logError(error, errorInfo);\r\n\r\n  alert(message);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}