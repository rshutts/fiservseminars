import defaultMoment from 'moment';

var defaultFormats = {
    normalDateWithWeekday: "ddd, MMM D",
    normalDate: "D MMMM",
    shortDate: "MMM D",
    monthAndDate: "MMMM D",
    dayOfMonth: "D",
    year: "YYYY",
    month: "MMMM",
    monthShort: "MMM",
    monthAndYear: "MMMM YYYY",
    weekday: "dddd",
    weekdayShort: "ddd",
    minutes: "mm",
    hours12h: "hh",
    hours24h: "HH",
    seconds: "ss",
    fullTime: "LT",
    fullTime12h: "hh:mm A",
    fullTime24h: "HH:mm",
    fullDate: "ll",
    fullDateWithWeekday: "dddd, LL",
    fullDateTime: "lll",
    fullDateTime12h: "ll hh:mm A",
    fullDateTime24h: "ll HH:mm",
    keyboardDate: "L",
    keyboardDateTime: "L LT",
    keyboardDateTime12h: "L hh:mm A",
    keyboardDateTime24h: "L HH:mm",
};
var MomentUtils = /** @class */ (function () {
    function MomentUtils(_a) {
        var _b = _a === void 0 ? {} : _a, locale = _b.locale, formats = _b.formats, instance = _b.instance;
        this.lib = "moment";
        this.moment = instance || defaultMoment;
        this.locale = locale;
        this.formats = Object.assign({}, defaultFormats, formats);
    }
    MomentUtils.prototype.is12HourCycleInCurrentLocale = function () {
        return /A|a/.test(this.moment().localeData().longDateFormat("LT"));
    };
    MomentUtils.prototype.getFormatHelperText = function (format) {
        var _this = this;
        // @see https://github.com/moment/moment/blob/develop/src/lib/format/format.js#L6
        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;
        return format
            .match(localFormattingTokens)
            .map(function (token) {
            var firstCharacter = token[0];
            if (firstCharacter === "L" || firstCharacter === ";") {
                return _this.moment.localeData().longDateFormat(token);
            }
            return token;
        })
            .join("")
            .replace(/a/gi, "(a|p)m")
            .toLocaleLowerCase();
    };
    MomentUtils.prototype.getCurrentLocaleCode = function () {
        return this.locale || this.moment.locale();
    };
    MomentUtils.prototype.parse = function (value, format) {
        if (value === "") {
            return null;
        }
        if (this.locale) {
            return this.moment(value, format, this.locale, true);
        }
        return this.moment(value, format, true);
    };
    MomentUtils.prototype.date = function (value) {
        if (value === null) {
            return null;
        }
        var moment = this.moment(value);
        moment.locale(this.locale);
        return moment;
    };
    MomentUtils.prototype.toJsDate = function (value) {
        return value.toDate();
    };
    MomentUtils.prototype.isValid = function (value) {
        return this.moment(value).isValid();
    };
    MomentUtils.prototype.isNull = function (date) {
        return date === null;
    };
    MomentUtils.prototype.getDiff = function (date, comparing) {
        return date.diff(comparing);
    };
    MomentUtils.prototype.isAfter = function (date, value) {
        return date.isAfter(value);
    };
    MomentUtils.prototype.isBefore = function (date, value) {
        return date.isBefore(value);
    };
    MomentUtils.prototype.isAfterDay = function (date, value) {
        return date.isAfter(value, "day");
    };
    MomentUtils.prototype.isBeforeDay = function (date, value) {
        return date.isBefore(value, "day");
    };
    MomentUtils.prototype.isBeforeYear = function (date, value) {
        return date.isBefore(value, "year");
    };
    MomentUtils.prototype.isAfterYear = function (date, value) {
        return date.isAfter(value, "year");
    };
    MomentUtils.prototype.startOfDay = function (date) {
        return date.clone().startOf("day");
    };
    MomentUtils.prototype.endOfDay = function (date) {
        return date.clone().endOf("day");
    };
    MomentUtils.prototype.format = function (date, formatKey) {
        return this.formatByString(date, this.formats[formatKey]);
    };
    MomentUtils.prototype.formatByString = function (date, formatString) {
        var clonedDate = date.clone();
        clonedDate.locale(this.locale);
        return clonedDate.format(formatString);
    };
    MomentUtils.prototype.formatNumber = function (numberToFormat) {
        return numberToFormat;
    };
    MomentUtils.prototype.getHours = function (date) {
        return date.get("hours");
    };
    MomentUtils.prototype.addDays = function (date, count) {
        return count < 0
            ? date.clone().subtract(Math.abs(count), "days")
            : date.clone().add(count, "days");
    };
    MomentUtils.prototype.addMonths = function (date, count) {
        return count < 0
            ? date.clone().subtract(Math.abs(count), "months")
            : date.clone().add(count, "months");
    };
    MomentUtils.prototype.setHours = function (date, count) {
        return date.clone().hours(count);
    };
    MomentUtils.prototype.getMinutes = function (date) {
        return date.get("minutes");
    };
    MomentUtils.prototype.setMinutes = function (date, count) {
        return date.clone().minutes(count);
    };
    MomentUtils.prototype.getSeconds = function (date) {
        return date.get("seconds");
    };
    MomentUtils.prototype.setSeconds = function (date, count) {
        return date.clone().seconds(count);
    };
    MomentUtils.prototype.getMonth = function (date) {
        return date.get("month");
    };
    MomentUtils.prototype.isSameDay = function (date, comparing) {
        return date.isSame(comparing, "day");
    };
    MomentUtils.prototype.isSameMonth = function (date, comparing) {
        return date.isSame(comparing, "month");
    };
    MomentUtils.prototype.isSameYear = function (date, comparing) {
        return date.isSame(comparing, "year");
    };
    MomentUtils.prototype.isSameHour = function (date, comparing) {
        return date.isSame(comparing, "hour");
    };
    MomentUtils.prototype.setMonth = function (date, count) {
        return date.clone().month(count);
    };
    MomentUtils.prototype.getMeridiemText = function (ampm) {
        return ampm === "am" ? "AM" : "PM";
    };
    MomentUtils.prototype.startOfMonth = function (date) {
        return date.clone().startOf("month");
    };
    MomentUtils.prototype.endOfMonth = function (date) {
        return date.clone().endOf("month");
    };
    MomentUtils.prototype.startOfWeek = function (date) {
        return date.clone().startOf("week");
    };
    MomentUtils.prototype.endOfWeek = function (date) {
        return date.clone().endOf("week");
    };
    MomentUtils.prototype.getNextMonth = function (date) {
        return date.clone().add(1, "month");
    };
    MomentUtils.prototype.getPreviousMonth = function (date) {
        return date.clone().subtract(1, "month");
    };
    MomentUtils.prototype.getMonthArray = function (date) {
        var firstMonth = date.clone().startOf("year");
        var monthArray = [firstMonth];
        while (monthArray.length < 12) {
            var prevMonth = monthArray[monthArray.length - 1];
            monthArray.push(this.getNextMonth(prevMonth));
        }
        return monthArray;
    };
    MomentUtils.prototype.getYear = function (date) {
        return date.get("year");
    };
    MomentUtils.prototype.setYear = function (date, year) {
        return date.clone().set("year", year);
    };
    MomentUtils.prototype.mergeDateAndTime = function (date, time) {
        return date.hour(time.hour()).minute(time.minute()).second(time.second());
    };
    MomentUtils.prototype.getWeekdays = function () {
        return this.moment.weekdaysShort(true);
    };
    MomentUtils.prototype.isEqual = function (value, comparing) {
        if (value === null && comparing === null) {
            return true;
        }
        return this.moment(value).isSame(comparing);
    };
    MomentUtils.prototype.getWeekArray = function (date) {
        var start = date.clone().startOf("month").startOf("week");
        var end = date.clone().endOf("month").endOf("week");
        var count = 0;
        var current = start;
        var nestedWeeks = [];
        while (current.isBefore(end)) {
            var weekNumber = Math.floor(count / 7);
            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
            nestedWeeks[weekNumber].push(current);
            current = current.clone().add(1, "day");
            count += 1;
        }
        return nestedWeeks;
    };
    MomentUtils.prototype.getYearRange = function (start, end) {
        var startDate = this.moment(start).startOf("year");
        var endDate = this.moment(end).endOf("year");
        var years = [];
        var current = startDate;
        while (current.isBefore(endDate)) {
            years.push(current);
            current = current.clone().add(1, "year");
        }
        return years;
    };
    MomentUtils.prototype.isWithinRange = function (date, _a) {
        var start = _a[0], end = _a[1];
        return date.isBetween(start, end, null, "[]");
    };
    return MomentUtils;
}());

export default MomentUtils;
