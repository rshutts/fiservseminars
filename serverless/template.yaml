AWSTemplateFormatVersion: 2010-09-09
Outputs:
  WebSocketURI:
    Description: The WSS Protocol URI to connect to
    Value: !Join 
      - ''
      - - 'wss://'
        - !Ref SimpleChatTestWebSocket
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - !Ref Stage
Resources:
  DisconnectIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      IntegrationType: AWS_PROXY
      ApiId: !Ref SimpleChatTestWebSocket
      IntegrationUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
      Description: Disconnect Integration
  SendMessageFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: SendMessageFunctionRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref TableName
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref TableName
                Effect: Allow
        - PolicyName: SendMessageFunctionRolePolicy1
          PolicyDocument:
            Statement:
              - Action:
                  - 'execute-api:ManageConnections'
                Resource:
                  - !Sub >-
                    arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatTestWebSocket}/*
                Effect: Allow
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
  OnDisconnectPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
    DependsOn:
      - SimpleChatTestWebSocket
  OnDisconnectFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: aws-sam-cli-managed-testchat-samclisourcebucket
        S3Key: testchat/bf769073a35933585e77dd1fa78e23e6
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Handler: app.onDisconnect
      Role: !GetAtt 
        - OnDisconnectFunctionRole
        - Arn
      Runtime: nodejs12.x
  SendMessageFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: aws-sam-cli-managed-testchat-samclisourcebucket
        S3Key: testchat/bf769073a35933585e77dd1fa78e23e6
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Handler: app.sendMessage
      Role: !GetAtt 
        - SendMessageFunctionRole
        - Arn
      Runtime: nodejs12.x
  ConnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref SimpleChatTestWebSocket
      OperationName: ConnectRoute
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join 
        - /
        - - integrations
          - !Ref ConnectIntegration
  Deployment:
    Type: 'AWS::ApiGatewayV2::Deployment'
    Properties:
      ApiId: !Ref SimpleChatTestWebSocket
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
  OnDisconnectFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: OnDisconnectFunctionRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref TableName
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref TableName
                Effect: Allow
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
  OnConnectPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
    DependsOn:
      - SimpleChatTestWebSocket
  OnConnectFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: OnConnectFunctionRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref TableName
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref TableName
                Effect: Allow
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
  SendMessageIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      IntegrationType: AWS_PROXY
      ApiId: !Ref SimpleChatTestWebSocket
      IntegrationUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
      Description: Send Integration
  SendRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref SimpleChatTestWebSocket
      OperationName: SendRoute
      RouteKey: sendmessage
      AuthorizationType: NONE
      Target: !Join 
        - /
        - - integrations
          - !Ref SendMessageIntegration
  DisconnectRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref SimpleChatTestWebSocket
      OperationName: DisconnectRoute
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join 
        - /
        - - integrations
          - !Ref DisconnectIntegration
  ConnectionsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      KeySchema:
        - KeyType: HASH
          AttributeName: connectionId
      SSESpecification:
        SSEEnabled: true
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        WriteCapacityUnits: 5
        ReadCapacityUnits: 5
  SimpleChatTestWebSocket:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
      Name: SimpleChatTestWebSocket
  SendMessagePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
    DependsOn:
      - SimpleChatTestWebSocket
  ConnectIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      IntegrationType: AWS_PROXY
      ApiId: !Ref SimpleChatTestWebSocket
      IntegrationUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
      Description: Connect Integration
  OnConnectFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: aws-sam-cli-managed-testchat-samclisourcebucket
        S3Key: testchat/bf769073a35933585e77dd1fa78e23e6
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 256
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Handler: app.onConnect
      Role: !GetAtt 
        - OnConnectFunctionRole
        - Arn
      Runtime: nodejs12.x
  Stage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatTestWebSocket
      StageName: Prod
      Description: Prod Stage
Description: Simple Chat
Parameters:
  TableName:
    ConstraintDescription: >-
      Required. Can be characters and underscore only. No numbers or special
      characters allowed.
    Description: >-
      (Required) The name of the new DynamoDB to store connection identifiers
      for each connected clients. Minimum 3 characters
    Default: simplechat_connections
    MinLength: 3
    AllowedPattern: '^[A-Za-z_]+$'
    MaxLength: 50
    Type: String